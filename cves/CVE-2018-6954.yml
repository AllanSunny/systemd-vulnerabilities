CVE: CVE-2018-6954
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: "If you are manually editing this file, then you are \"curating\"
  it. \n\nSet the version number that you were given in the instructions. \n \nThis
  will enable additional editorial checks on this file to make sure you \nfill everything
  out properly. If you are a student, we cannot accept your work\nas finished unless
  curated is set to true.  \n"
curation_level: 0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date:
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2018-2-13'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: "What bugs and/or pull requests are involved in this vulnerability?
  \n\nFor systemd, this is typically their GitHub issues, but could also include \nbugs
  from other databases. Put a URL instead of a single number.  \n"
bugs: []
fixes_instructions: "Please put the commit hash in \"commit\" below.\n\nThis must
  be a git commit hash from the systemd source repo, a  40-character \nhexademical
  string/\n\nPlace any notes you would like to make in the notes field.\n"
fixes:
- commit: 6fb2e9a08f273ec9f7ec46154052f2584f745dbd
  note: https://github.com/fbuihuu/systemd/commit/6fb2e9a08f273ec9f7ec46154052f2584f745dbd
- commit:
  note:
vcc_instructions: "The vulnerability-contributing commits.\n\nThese are found by our
  tools by traversing the Git Blame history, where we \ndetermine which commit(s)
  introduced the functionality. \n\nLook up these VCC commits and verify that they
  are not simple refactorings, \nand that they are, in fact introducing the vulnerability
  into the system. \nOften, introducing the file or function is where the VCC is,
  but VCCs can be \nanything. \n\nPlace any notes you would like to make in the notes
  field.\n"
vccs: []
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer:
  automated:
  contest:
  developer:
discoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * pull request
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in? These are subsystems WITHIN systemd

    Two areas to look:
      - Bug labels
      - Directory names

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Name should be all lowercase, NOT a specific file.

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name:
  note:
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides? A sandboxing feature is one that

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
disagreement:
  question: |
    Was there any disagreement expressed in the conversations surrounding this?

    Perhaps it was disputed by someone at some point about whether this is an
    actual vulnerability or not? (If so, the answer to both is "true")

    Or, was there disagreement about something else?

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      disputed_as_security: true or false
      any_disagreement: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  disputed_as_security:
  any_disagreement:
  note:
vouch:
  question: "Was there any part of the fix that involved one person vouching for \nanother's
    work?\n\nThis can include:\n  * signing off on a commit message\n  * mentioning
    a discussion with a colleague checking the work\n  * upvoting a solution on a
    pull request\n\nAnswer must be true or false.\nWrite a note about how you came
    to the conclusions you did, regardless of what your answer was.\n"
  answer:
  note:
stacktrace:
  question: "Are there any stacktraces in the bug reports? \n\nSecondly, if there
    is a stacktrace, is the fix in the same file that the \nstacktrace points to?
    \n\nIf there are no stacktraces, then both of these are false - but be sure to\nmention
    where you checked in the note.\n\nAnswer must be true or false.\nWrite a note
    about how you came to the conclusions you did, regardless of\nwhat your answer
    was.\n"
  any_stacktraces:
  stacktrace_with_fix:
  note:
forgotten_check:
  question: "Does the fix for the vulnerability involve adding a forgotten check?\n\nA
    \"forgotten check\" can mean many things. It often manifests as the fix \ninserting
    an entire if-statement or a conditional to an existing \nif-statement. Or a call
    to a method that checks something.\n\nExample of checks can include:\n  * null
    pointer checks\n  * check the current role, e.g. root\n  * boundary checks for
    a number\n  * consult file permissions\n  * check a return value\n\nAnswer must
    be true or false.\nWrite a note about how you came to the conclusions you did,
    regardless of\nwhat your answer was.\n"
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: "In your opinion, after all of this research, what mistakes were made
    that\nled to this vulnerability? Coding mistakes? Design mistakes?\nMaintainability?
    Requirements? Miscommunications?\n\nThere can, and usually are, many mistakes
    behind a vulnerability.\n\nRemember that mistake can come in many forms:\n* slip:
    failing to complete a properly planned step due to inattention\n          e.g.
    wrong key in the ignition\n* lapse: failing to complete a properly planned step
    due to memory failure\n          e.g. forgetting to put car in reverse before
    backing up\n* mistake: error that occurs when the plan is inadequate\n          e.g.
    getting stuck in traffic because you didn’t consider the \n              impact
    of the bridge closing\n\nLook at the CWE entry for this vulnerability and examine
    the mitigations\nthey have written there. Are they doing those? Does the fix look
    proper?\n\nWrite a thoughtful entry here that people in the software engineering\nindustry
    would find interesting.\n"
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE:
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
